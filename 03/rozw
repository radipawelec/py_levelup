import logging
import json
from pprint import pprint
 
# 1
 
def add_tag(sentence):
    def real_decorator(to_be_decorated):
        def wrapper(*args, **kwargs):
            result = to_be_decorated(*args, **kwargs)
            return f'<{sentence}>{result}</{sentence}>'
        return wrapper
    return real_decorator
 
@add_tag('h1')
def write_something():
    return 'something'
 
result = write_something()
assert result == '<h1>something</h1>'
 
 
# 2
 
def validate_json(sentence1, sentence2):
    def real_decorator(to_be_decorated):
        def wrapper(*args, **kwargs):
            result = args[0]
            data = json.loads(result)
            try:
                if sentence1 in data and sentence2 in data and result.count(':') == 2:
                    return to_be_decorated(*args, **kwargs)
                else:
                    raise ValueError
            except ValueError:
                print("o nie ValueError!")
        return wrapper
    return real_decorator
 
@validate_json('first_name', 'last_name')
def process_json(json_data):
    return len(json_data)
 
result = process_json('{"first_name": "James", "last_name": "Bond"}')
assert result == 44
 
 
# 3
 
def log_this(log,lvl,fo):
    def real_decorator(to_be_decorated):
        def wrapper(*args, **kwargs):
            #logging.basicConfig(level=logging.DEBUG)
            logging.basicConfig(format="",level=lvl)
            s = args
            if 'd' in kwargs:
                s = s + (f'd={kwargs["d"]}',)
            if 'c' in kwargs:
                s = s + (f'c={kwargs["c"]}',)
            log.info(fo,to_be_decorated.__name__,s,to_be_decorated(*args, **kwargs))
            return ""
        return wrapper
    return real_decorator
 
 
logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)
 
@log_this(logger, logging.INFO, '%s: %s -> %s')
def my_func(a, b, c=None, d=False):
    return 'Wow!'
 
my_func(1, 2, d=True)